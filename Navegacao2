import lejos.hardware.Button;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.MotorPort;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.EV3TouchSensor;
import lejos.robotics.SampleProvider;
import lejos.utility.Delay;

public class Navegacao2 implements Runnable {
	private static EV3LargeRegulatedMotor motorEsq = new EV3LargeRegulatedMotor(
			MotorPort.B);
	private static EV3LargeRegulatedMotor motorDir = new EV3LargeRegulatedMotor(
			MotorPort.C);
	private static EV3TouchSensor sensorToque = new EV3TouchSensor(
			SensorPort.S3);
	private static EV3ColorSensor sensorCorChao = new EV3ColorSensor(
			SensorPort.S4);
	private static boolean tocado = false;
	private static final double RAIO_RODA = 0.028; // metros
	private static final double DISTANCIA_RODAS = 0.137; // metros
	private static int velocidadeMenor = 100;
	private static int angCurva = 85;
	public static final int LESTE = 0;
	public static final int NORTE = 1;
	public static final int OESTE = 2;
	public static final int SUL = 3;
	public static int orientacaoAtual = NORTE;
	public static boolean mudouDeSala = false;
	public static boolean virouEsq = false;
	public static boolean virouDir = false;
	public Navegacao2() {
		resetarTacometro();
	}
	
	public static void andarFrente() {
		motorEsq.forward();
		motorDir.forward();
	}

	public static void resetarTacometro() {
		motorEsq.resetTachoCount();
		motorDir.resetTachoCount();
	}

	public static void andarGraus(double distancia) {
		// gira em cada roda o angulo necessario para chegar na distancia
		int angulo = (int) (180 * (distancia) / (Math.PI * RAIO_RODA));
		motorEsq.rotate(angulo, true);
		motorDir.rotate(angulo);
	}

	public static void parar() {
		motorEsq.stop(true);
		motorDir.stop();
	}

	public static void r√©() {
		setVelocidade(100);
		motorEsq.backward();
		motorDir.backward();
	}

	public static void alinhar() {
		setVelocidade(300);
		motorEsq.backward();
		motorDir.backward();
		Delay.msDelay(1000);
		parar();
		resetarTacometro();
	}

	public static void virarParede() {
		if (orientacaoAtual == OESTE) {
			virarDuasRodasDir(angCurva, velocidadeMenor);
		} else if (orientacaoAtual == LESTE) {
			virarDuasRodasEsq(angCurva, velocidadeMenor);
		} else if(orientacaoAtual == NORTE){
			virarDuasRodasDir(angCurva, velocidadeMenor);
		} else if(orientacaoAtual == SUL){
			virarDuasRodasEsq(angCurva, velocidadeMenor);
		}
	}
	
	public static void virarParedeMesmaColuna(){
		if (!virouDir) {
			virarDuasRodasDir(angCurva, velocidadeMenor);
			virarDuasRodasDir(angCurva, velocidadeMenor);
		} else if (!virouEsq) {
			virarDuasRodasEsq(angCurva, velocidadeMenor);
			virarDuasRodasEsq(angCurva, velocidadeMenor);
		}
	}
	
	public static void virarZigZag() {
		parar();
			if (orientacaoAtual == NORTE) {
				if (virouDir) {
					virarDuasRodasDir(angCurva, velocidadeMenor);
				} else {
					virarDuasRodasEsq(angCurva, velocidadeMenor);
				}
			} else if (orientacaoAtual == SUL) {
				if (virouEsq) {
					virarDuasRodasDir(angCurva, velocidadeMenor);
				} else {
					virarDuasRodasEsq(angCurva, velocidadeMenor);
				}
			} else if(orientacaoAtual == OESTE){
				if (virouEsq) {
					virarDuasRodasDir(angCurva, velocidadeMenor);
				} else {
					virarDuasRodasEsq(angCurva, velocidadeMenor);
				}
			} else if(orientacaoAtual == LESTE){
				if (virouDir) {
					virarDuasRodasDir(angCurva, velocidadeMenor);
				} else {
					virarDuasRodasEsq(angCurva, velocidadeMenor);
				}
			}
	}

	public static void virarEsq(int ang, int vel) {
		// gira o angulo necessario em uma roda e deixa a outra parada
		setVelocidade(vel);
		motorEsq.stop(true);
		motorDir.rotate((int) (ang * (DISTANCIA_RODAS / RAIO_RODA)));
		virouEsq = true;
		virouDir = false;
		resetarTacometro();
		proximaDirecao();
	}

	public static void virarDir(int ang, int vel) {
		// gira o angulo necessario em uma roda e deixa a outra parada
		setVelocidade(vel);
		motorDir.stop(true);
		motorEsq.rotate((int) (ang * (DISTANCIA_RODAS / RAIO_RODA)));
		virouDir = true;
		virouEsq = false;
		resetarTacometro();
		proximaDirecao();
	}

	public static void virarDuasRodasEsq(int ang, int vel) {
		// gira o angulo necessario com uma roda pra frente e outra pra tras em
		// torno do eixo do robo
		setVelocidade(vel);
		motorEsq.rotate((int) (-ang * (DISTANCIA_RODAS / (2 * RAIO_RODA))),
				true);
		motorDir.rotate((int) (ang * (DISTANCIA_RODAS / (2 * RAIO_RODA))));
		virouEsq = true;
		virouDir = false;
		resetarTacometro();
		proximaDirecao();
	}
	
	public static void irProxSala(){
		setVelocidade(2*velocidadeMenor);
		while(!mudouDeSala)
		andarFrente();
		parar();
		resetarTacometro();
	}

	public static void virarDuasRodasDir(int ang, int vel) {
		// gira o angulo necessario com uma roda pra frente e outra pra tras em
		// torno do eixo do robo
		setVelocidade(vel);
		motorDir.rotate((int) (-ang * (DISTANCIA_RODAS / (2 * RAIO_RODA))),
				true);
		motorEsq.rotate((int) (ang * (DISTANCIA_RODAS / (2 * RAIO_RODA))));
		virouDir = true;
		virouEsq = false;
		resetarTacometro();
		proximaDirecao();
	}

	public static void setVelocidade(int vel) {
		motorEsq.setSpeed(vel);
		motorDir.setSpeed(vel);
	}

	public static void setAceleracao(int acel) {
		motorDir.setAcceleration(acel);
		motorEsq.setAcceleration(acel);
	}

	public static double getDistPercorrida() {
		double angEsq = motorEsq.getTachoCount();
		double dist = RAIO_RODA * angEsq * (Math.PI / 180);
		return dist;
	}

	private static void amostragem() {
		SampleProvider toque = sensorToque.getTouchMode();
		SampleProvider corChao = sensorCorChao.getColorIDMode();
		float amostraToque[] = new float[toque.sampleSize()];
		float amostraCorChao[] = new float[corChao.sampleSize()];
		toque.fetchSample(amostraToque, 0);
		corChao.fetchSample(amostraCorChao, 0);
		if (amostraToque[0] == 1)
			tocado = true;
		else
			tocado = false;

		if (amostraCorChao[0] == 6) // Branco
			mudouDeSala = false;
		else if (amostraCorChao[0] == 7) // Preto
			mudouDeSala = true;
	}

	public static void proximaDirecao() {
		switch (orientacaoAtual) {
		case NORTE:
			if (virouEsq)
				orientacaoAtual = OESTE;
			else if (virouDir)
				orientacaoAtual = LESTE;
			break;
		case SUL:
			if (virouEsq)
				orientacaoAtual = LESTE;
			else if (virouDir)
				orientacaoAtual = OESTE;
			break;
		case LESTE:
			if (virouEsq)
				orientacaoAtual = NORTE;
			else if (virouDir)
				orientacaoAtual = SUL;
			break;
		case OESTE:
			if (virouEsq)
				orientacaoAtual = SUL;
			else if (virouDir)
				orientacaoAtual = NORTE;
			break;
		default:
			break;
		}
	}

	public static boolean getToque() {
		return tocado;
	}

	@Override
	public void run() {
		while (!Button.ESCAPE.isDown()) {
			amostragem();
		}
	}

}
