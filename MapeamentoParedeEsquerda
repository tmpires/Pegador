import java.util.List;
import lejos.hardware.Button;
import lejos.hardware.Sound;
import lejos.utility.Delay;

public class Mapeamento {
	private static Posicao ultMapeadaCentral;
	private static Posicao ultMapeadaPeriferica;
	private static Posicao atual;
	private static int ultOrientacaoCentral;
	private static int ultOrientacaoPeriferica;
	private static int numLinhas = 9;
	private static int numColunas = 9;
	private static Celula[][] Mapa = new Celula[numLinhas][numColunas];
	private static Celula[][] MapaCentral = new Celula[numLinhas][numColunas];
	private static Celula[][] MapaPeriferico = new Celula[numLinhas][numColunas];
	private static int linhaInicial = 4;
	private static int colunaInicial = 0;
	private static int linha = linhaInicial;
	private static int coluna = colunaInicial;
	private static Posicao inicio = new Posicao(linhaInicial, colunaInicial);
	public static int vazio = 0;
	public static int bonecoPreto = 1;
	public static int bonecoNaoPreto = 2;
	public static boolean virouEsq = false;
	public static boolean primeiraCurva = true;
	public static double tamanhoDaCelula = 0.2;
	private static boolean estaNaParede = false;
	private static boolean resgatando = false;
	private static boolean retornandoMapeamento = false;
	private static int velocidadeMaior = Navegacao.getVelocidadeMaior();
	private static int velocidadeMenor = Navegacao.getVelocidadeMenor();
	private static int velocidadeCurva = Navegacao.getVelocidadeCurva();
	private static int angCurva = Navegacao.getAnguloCurva();
	private static boolean mapearZigZag = false;
	public static final int MODULOINICIAL = 0;
	public static final int SALACENTRAL = 1;
	public static final int SALAPERIFERICA = 2;
	public static int salaAtual = MODULOINICIAL;
	public static int ultSala;
	private static double minimoDiagonal1 = 0.5;
	private static double minimoDiagonal2 = 0.4;
	private static double minimoDiagonal3 = 0.6;
	private static double minimoReta = 0.4;
	private static Celula[] paredeAleatoria = new Celula[7];
	private static boolean paredeEncontrada = false;
	private static boolean virarParedeAleatoria;
	private static double angulo;

	/**
	 * reinicia para o modulo inicial sem perder o mapeamento
	 * @throws Exception
	 */
	public static void reiniciarSala() throws Exception{
		Navegacao.parar();
		ultMapeadaPeriferica = Mapa[linha][coluna].getPosicao();
		ultOrientacaoPeriferica = Navegacao.orientacaoAtual;
		salaAtual = MODULOINICIAL;
		Navegacao.orientacaoAtual = Navegacao.NORTE;
		setMapearZigZag(false);
		while(!Button.ENTER.isDown())
			System.out.println("Aperte ENTER para retornar");
		Navegacao.setAngAnterior(Navegacao.getAnguloAtual());
		Navegacao.irProxSala();
		Mapeamento.atualizarSala();
		Navegacao.andarFrente();
		Delay.msDelay(1300);
		irPerifericaEsquerda();
		retornar(ultMapeadaPeriferica);
		mudarOrientacao(ultOrientacaoPeriferica);
	}
	
	/**
	 * Verificar se a celula foi checada, caso não, salva o conteudo na matriz.
	 * Se houver um boneco preto chama o método de resgate
	 */
	public static void checarCelulas() throws Exception {
		int conteudo = verificarConteudo();
		if (conteudo == vazio) {
			Mapa[linha][coluna].setOccupied(false);
		} else if (conteudo == bonecoPreto) {
			Navegacao.parar();
			Mapa[linha][coluna].setOccupied(false);
			resgatando = true;
			mapearZigZag = false;
			try {
				retornar(inicio);
			} catch (Exception e) {
				Button.LEDPattern(3);
				if (linha != 4) {
					while (linha < 4) {
						mudarOrientacao(Navegacao.LESTE);
						irProximaCelula();
						atualizarCelulas();
					}
					while (linha > 4) {
						mudarOrientacao(Navegacao.OESTE);
						irProximaCelula();
						atualizarCelulas();
					}
				}
				mudarOrientacao(Navegacao.SUL);
				while (coluna > 0) {
					irProximaCelula();
					atualizarCelulas();
				}
				deixarBonecoDestino();
			}
			mapearZigZag = true;
		} else if (conteudo == bonecoNaoPreto) {
			Navegacao.parar();
			moverBonecoBranco();
			Navegacao.setVelocidade(velocidadeMaior);
		}
	}

	/**
	 * Leva o boneco branco para a celula mais proxima que está vazia
	 * 
	 * @throws Exception
	 */
	public static void moverBonecoBranco() throws Exception {
		if (coluna > 0 && !Mapa[linha][coluna - 1].isOccupied()
				&& (linha != linhaInicial && (coluna - 1) != colunaInicial)) {
			ultOrientacaoCentral = Navegacao.orientacaoAtual;
			Mapa[linha][coluna - 1].setOccupied(true);
			mudarOrientacao(Navegacao.SUL);
		} else if (linha < numLinhas - 1
				&& !Mapa[linha + 1][coluna].isOccupied()
				&& ((linha + 1) != linhaInicial && coluna != colunaInicial)) {
			ultOrientacaoCentral = Navegacao.orientacaoAtual;
			Mapa[linha + 1][coluna].setOccupied(true);
			mudarOrientacao(Navegacao.LESTE);
		} else if (linha > 0 && !Mapa[linha - 1][coluna].isOccupied()
				&& ((linha - 1) != linhaInicial && coluna != colunaInicial)) {
			ultOrientacaoCentral = Navegacao.orientacaoAtual;
			Mapa[linha - 1][coluna].setOccupied(true);
			mudarOrientacao(Navegacao.OESTE);
		} else if (coluna < numColunas - 1
				&& !Mapa[linha][coluna + 1].isOccupied()
				&& (linha != linhaInicial && (coluna - 1) != colunaInicial)) {
			ultOrientacaoCentral = Navegacao.orientacaoAtual;
			Mapa[linha][coluna + 1].setOccupied(true);
			mudarOrientacao(Navegacao.NORTE);
		} else {
			irProximaCelula();
			atualizarCelulas();
			ultOrientacaoCentral = Navegacao.orientacaoAtual;
			if (Navegacao.orientacaoAtual == Navegacao.OESTE) {
				mudarOrientacao(Navegacao.LESTE);
				Mapa[linha + 1][coluna].setOccupied(true);
			} else if (Navegacao.orientacaoAtual == Navegacao.LESTE) {
				mudarOrientacao(Navegacao.OESTE);
				Mapa[linha - 1][coluna].setOccupied(true);
			}
		}
		Navegacao.setVelocidade(velocidadeMenor);
		Navegacao.andarGraus(tamanhoDaCelula / 2);
		Captura.abrirGarra();
		Navegacao.andarGraus(-tamanhoDaCelula / 2);
		Navegacao.setVelocidade(velocidadeMaior);
		mudarOrientacao(ultOrientacaoCentral);
	}

	/**
	 * seta o mapeamento da sala como zigzag
	 * 
	 * @param boolean zigzag
	 */
	public static void setMapearZigZag(boolean zigzag) {
		mapearZigZag = zigzag;
	}

	/**
	 * Navega até a sala periferica à ESQUERDA
	 * 
	 * @throws Exception
	 */
	public static void irPerifericaEsquerda() throws Exception {
		while (coluna < 4) {
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
		}
		mudarOrientacao(Navegacao.OESTE);
		while (linha > 0) {
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
		}
		Navegacao.irProxSala();
		Navegacao.andarFrente();
		if (retornandoMapeamento)
			Delay.msDelay(800);
		else
			Delay.msDelay(1000);
		atualizarSala();
	}

	private static void somaCelula() {
		switch (Navegacao.orientacaoAtual) {
		case Navegacao.LESTE:
			if (linha < numLinhas - 1)
				linha++;
			System.out.println("LESTE");
			break;
		case Navegacao.OESTE:
			System.out.println("OESTE");
			if (linha >= 1)
				linha--;
			break;
		case Navegacao.NORTE:
			if (coluna < numColunas - 1)
				coluna++;
			System.out.println("NORTE");
			if (!resgatando && !retornandoMapeamento && mapearZigZag)
				Navegacao.virarZigZag();
			break;
		case Navegacao.SUL:
			if (coluna >= 1)
				coluna--;
			System.out.println("SUL");
			if (!resgatando && !retornandoMapeamento && mapearZigZag)
				Navegacao.virarZigZag();
			break;
		default:
			break;
		}
		System.out.println("[" + linha + ", " + coluna + "]");
	}

	/**
	 * Atualiza para a proxima celula dependendo da orientacao do robo Caso ele
	 * esteja na parede, realiza a manobra de virar
	 * 
	 * @throws Exception
	 */

	public static void atualizarCelulas() throws Exception {
		somaCelula();

		if (!resgatando
				&& (paredeAleatoria[0].temParede() && linha == 4
						&& Navegacao.orientacaoAtual == Navegacao.OESTE && coluna <= 3)
				|| (paredeAleatoria[1].temParede() && linha == 4
						&& Navegacao.orientacaoAtual == Navegacao.LESTE && coluna <= 3)
				|| (paredeAleatoria[4].temParede() && linha == 4 && Navegacao.orientacaoAtual == Navegacao.OESTE)
				|| (paredeAleatoria[5].temParede() && linha == 5 && Navegacao.orientacaoAtual == Navegacao.OESTE)) {
			if (!resgatando
					&& coluna == 3
					|| (paredeAleatoria[4].temParede() && coluna == 7
							&& linha == 4 && Navegacao.orientacaoAtual == Navegacao.OESTE)) {
				mapearProximoParede();
			} else {
				virarParedeAleatoria = true;
			}
		} else {
			virarParedeAleatoria = false;
		}

		if (((linha == 0 && Navegacao.orientacaoAtual == Navegacao.OESTE)
				|| (linha == 8 && Navegacao.orientacaoAtual == Navegacao.LESTE)
				|| (coluna == 8 && Navegacao.orientacaoAtual == Navegacao.NORTE) || (coluna == 0 && Navegacao.orientacaoAtual == Navegacao.SUL))
				|| virarParedeAleatoria) {
			estaNaParede = true;
			Sound.beep();
		} else {
			estaNaParede = false;
		}

		if (((linha == 0 && Navegacao.orientacaoAtual == Navegacao.LESTE)
				|| (linha == 8 && Navegacao.orientacaoAtual == Navegacao.OESTE)
				|| (coluna == 8 && Navegacao.orientacaoAtual == Navegacao.SUL) || (coluna == 0 && Navegacao.orientacaoAtual == Navegacao.NORTE))
				&& linha != 4) {
			Navegacao.alinhar();
		}

		if (estaNaParede && (Mapa[linha][coluna].getPosicao() != inicio)
				&& mapearZigZag) {
			Navegacao.parar();
			Navegacao.ré();
			Delay.msDelay(800);
			if (!resgatando) {
				Navegacao.virarParede();
			}
		}

		/*
		 * if (estaNaPorta && salaAtual == SALACENTRAL) { checarCelulas();
		 * Navegacao.irProxSala(); }
		 */
	}

	/**
	 * Inicia as celulas que podem conter a parede
	 */

	public static void inicializarParedes() {
		paredeAleatoria[0] = MapaPeriferico[2][1];
		paredeAleatoria[1] = MapaPeriferico[6][1];
		paredeAleatoria[2] = MapaPeriferico[6][3];
		paredeAleatoria[3] = MapaPeriferico[2][3];
		paredeAleatoria[4] = MapaPeriferico[1][6];
		paredeAleatoria[5] = MapaPeriferico[3][6];
		paredeAleatoria[6] = MapaPeriferico[7][6];
	}

	/**
	 * Procura a parede nas suas possiveis posições
	 * 
	 * @throws Exception
	 */
	public static void procurarParede() throws Exception {
		mudarOrientacao(Navegacao.OESTE);
		while (linha > paredeAleatoria[0].getPosicao().x) {
			checarCelulas();
			irProximaCelula();
			atualizarCelulas();
		}
		mudarOrientacao(Navegacao.NORTE);
		Navegacao.alinhar();
		while (coluna < paredeAleatoria[0].getPosicao().y) {
			checarCelulas();
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			checarCelulas();
		}
		checarCelulas();
		mudarOrientacao(Navegacao.OESTE);
		angulo = Navegacao.getAngAnterior();
		movimentoProcuraParede(); // Procura a parede diagonal esquerda baixo
		if (!paredeEncontrada) {
			mudarOrientacao(Navegacao.OESTE);
			checarCelulas();
			irProximaCelula();
			atualizarCelulas();
			checarCelulas();
			irProximaCelula();
			atualizarCelulas();
			mudarOrientacao(Navegacao.LESTE);
			Navegacao.alinhar();
			while (linha < paredeAleatoria[1].getPosicao().x) {
				checarCelulas();
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				checarCelulas();
			}
			angulo = Navegacao.getAngAnterior();
			movimentoProcuraParede(); // Procura a parede diagonal direita baixo
			if (!paredeEncontrada) {
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.SUL);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.OESTE);
				Navegacao.alinhar();
				while (linha > 0) {
					checarCelulas();
					irProximaCelula();
					atualizarCelulas();
				}
				mudarOrientacao(Navegacao.NORTE);
				Navegacao.alinhar();
				while (coluna < 2) {
					checarCelulas();
					irProximaCelula();
					atualizarCelulas();
				}
				mudarOrientacao(Navegacao.LESTE);
				Navegacao.alinhar();
				setMapearZigZag(true);

				while (Mapa[linha][coluna].getPosicao() != Mapa[8][3]
						.getPosicao()) {
					Mapeamento.checarCelulas();
					Mapeamento.irProximaCelula();
					Mapeamento.atualizarCelulas();
				}
				mudarOrientacao(Navegacao.OESTE);
				while (linha > paredeAleatoria[2].getPosicao().x) {
					checarCelulas();
					irProximaCelula();
					atualizarCelulas();
				}

				angulo = Navegacao.getAngAnterior();
				mudarOrientacao(Navegacao.NORTE);
				movimentoProcuraParede(); // Procura a parede Reta direita meio
				if (!paredeEncontrada) {
					mudarOrientacao(Navegacao.OESTE);
					Navegacao.setAngAnterior(angulo);
					while (linha > paredeAleatoria[3].getPosicao().x) {
						checarCelulas();
						irProximaCelula();
						atualizarCelulas();
					}
					angulo = Navegacao.getAngAnterior();
					mudarOrientacao(Navegacao.NORTE);
					movimentoProcuraParede(); // Procura a parede Reta esquerda
												// meio
					if (!paredeEncontrada) {
						mudarOrientacao(Navegacao.OESTE);
						Navegacao.setAngAnterior(angulo);
						while (Mapa[linha][coluna].getPosicao() != Mapa[0][3]
								.getPosicao()) {
							Mapeamento.checarCelulas();
							Mapeamento.irProximaCelula();
							Mapeamento.atualizarCelulas();
						}
						setMapearZigZag(false);
						mudarOrientacao(Navegacao.NORTE);
						while (coluna < paredeAleatoria[4].getPosicao().y) {
							checarCelulas();
							irProximaCelula();
							atualizarCelulas();
						}
						mudarOrientacao(Navegacao.LESTE);
						Navegacao.alinhar();
						while (linha < paredeAleatoria[4].getPosicao().x) {
							checarCelulas();
							irProximaCelula();
							atualizarCelulas();
						}
						angulo = Navegacao.getAngAnterior();
						movimentoProcuraParede(); // Procura a parede diagonal
													// esquerda cima
						if (!paredeEncontrada) {
							mudarOrientacao(Navegacao.LESTE);
							while (linha < paredeAleatoria[5].getPosicao().x) {
								checarCelulas();
								irProximaCelula();
								atualizarCelulas();
							}
							angulo = Navegacao.getAngAnterior();
							movimentoProcuraParede(); // Procura a parede reta
														// cima
							if (!paredeEncontrada) {
								setarParede(paredeAleatoria[6].getPosicao());
								mapearProximoParede();
							} else
								mapearProximoParede();
						} else {
							mapearProximoParede();
						}
					} else {
						mapearProximoParede();
					}
				} else {
					mapearProximoParede();
				}
			} else {
				mapearProximoParede();
				retornar(inicio);
				mudarOrientacao(Navegacao.OESTE);
				setMapearZigZag(true);
			}
		} else {
			mapearProximoParede();
			mudarOrientacao(Navegacao.LESTE);
			setMapearZigZag(true);
		}
	}

	/**
	 * Faz o movimento para procurar a parede
	 */
	private static void movimentoProcuraParede() {
		if (Navegacao.orientacaoAtual == Navegacao.OESTE) {
			if (Reconhecimento.getDistancia() < minimoDiagonal1) {
				Navegacao.virarDuasRodasDir(40, velocidadeCurva);
				if (Reconhecimento.getDistancia() < minimoDiagonal2) {
					Navegacao.virarDuasRodasDir(40, velocidadeCurva);
					if (Reconhecimento.getDistancia() < minimoDiagonal3) {
						Button.LEDPattern(4);
						paredeEncontrada = true;
						setarParede(Mapa[linha][coluna].getPosicao());
						Navegacao.virarDuasRodasEsq(40, velocidadeCurva);
						Navegacao.virarDuasRodasEsq(40, velocidadeCurva);
					} else {
						Navegacao.virarDuasRodasEsq(40, velocidadeCurva);
						Navegacao.virarDuasRodasEsq(40, velocidadeCurva);
					}
				} else {
					Navegacao.virarDuasRodasEsq(40, velocidadeCurva);
				}
			}
		} else if (Navegacao.orientacaoAtual == Navegacao.LESTE
				&& Mapa[linha][coluna].getPosicao() != paredeAleatoria[5]
						.getPosicao()) {
			if (Reconhecimento.getDistancia() < minimoDiagonal1) {
				Navegacao.virarDuasRodasEsq(40, velocidadeCurva);
				if (Reconhecimento.getDistancia() < minimoDiagonal2) {
					Navegacao.virarDuasRodasEsq(40, velocidadeCurva);
					if (Reconhecimento.getDistancia() < minimoDiagonal3) {
						Button.LEDPattern(4);
						paredeEncontrada = true;
						setarParede(Mapa[linha][coluna].getPosicao());
						Navegacao.virarDuasRodasDir(40, velocidadeCurva);
						Navegacao.virarDuasRodasDir(40, velocidadeCurva);
					} else {
						Navegacao.virarDuasRodasDir(40, velocidadeCurva);
						Navegacao.virarDuasRodasDir(40, velocidadeCurva);
					}
				} else {
					Navegacao.virarDuasRodasDir(40, velocidadeCurva);
				}
			}
		} else if (Navegacao.orientacaoAtual == Navegacao.NORTE
				|| Mapa[linha][coluna].getPosicao() == paredeAleatoria[5]
						.getPosicao()) {
			if (Reconhecimento.getDistancia() < minimoReta) {
				Navegacao.virarDuasRodasEsq(30, velocidadeCurva);
				if (Reconhecimento.getDistancia() < minimoReta) {
					Navegacao.virarDuasRodasDir(30, velocidadeCurva);
					Navegacao.virarDuasRodasDir(30, velocidadeCurva);
					if (Reconhecimento.getDistancia() < minimoReta) {
						Button.LEDPattern(4);
						paredeEncontrada = true;
						setarParede(Mapa[linha][coluna].getPosicao());
						Navegacao.virarDuasRodasEsq(30, velocidadeCurva);
					} else {
						Navegacao.virarDuasRodasEsq(30, velocidadeCurva);
					}
				} else {
					Navegacao.virarDuasRodasDir(30, velocidadeCurva);
				}
			}
		}
	}

	/**
	 * Mapear celulas ao redor da parede aleatoria
	 * 
	 * @throws Exception
	 */

	private static void mapearProximoParede() throws Exception {
		// mapear proximo da parede esquerda diagonal baixo
		if (paredeAleatoria[0].temParede()) {
			if (coluna == 3) {
				setMapearZigZag(false);
				mudarOrientacao(Navegacao.NORTE);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.OESTE);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.SUL);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.OESTE);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.SUL);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.OESTE);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.NORTE);
				while (coluna < 4) {
					checarCelulas();
					irProximaCelula();
					atualizarCelulas();
				}
				mudarOrientacao(Navegacao.LESTE);
				setMapearZigZag(true);
			} else {
				setMapearZigZag(false);
				mudarOrientacao(Navegacao.SUL);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				mudarOrientacao(Navegacao.OESTE);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				Navegacao.parar();
				Navegacao.setVelocidade(velocidadeMenor);
				Navegacao.andarGraus(-tamanhoDaCelula);
				Navegacao.setVelocidade(velocidadeMaior);
				Navegacao.resetarTacometro();
				linha++;
				Navegacao.parar();
				Delay.msDelay(100);
				Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
				Navegacao.alinhar();
				Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
				mudarOrientacao(Navegacao.LESTE);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
		} // mapear proximo da parede direita diagonal baixo
		else if (paredeAleatoria[1].temParede()) {
			if (coluna == 3) {
				setMapearZigZag(false);
				mudarOrientacao(Navegacao.NORTE);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.LESTE);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.SUL);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.LESTE);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.SUL);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.LESTE);
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
				mudarOrientacao(Navegacao.NORTE);
				while (coluna < 4) {
					checarCelulas();
					irProximaCelula();
					atualizarCelulas();
				}
				mudarOrientacao(Navegacao.OESTE);
				setMapearZigZag(true);
			} else {
				mudarOrientacao(Navegacao.SUL);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				mudarOrientacao(Navegacao.LESTE);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				Navegacao.parar();
				Navegacao.setVelocidade(velocidadeMenor);
				Navegacao.andarGraus(-tamanhoDaCelula);
				Navegacao.setVelocidade(velocidadeMaior);
				Navegacao.resetarTacometro();
				linha--;
				Navegacao.parar();
				Delay.msDelay(100);
				Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
				Navegacao.alinhar();
				Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
		} // mapear proximo da parede direita reta meio
		else if (paredeAleatoria[2].temParede()) {
			mudarOrientacao(Navegacao.OESTE);
			Navegacao.setAngAnterior(angulo);
			while (linha > 0) {
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.NORTE);
			checarCelulas();
			irProximaCelula();
			atualizarCelulas();
			mudarOrientacao(Navegacao.LESTE);
			while (linha < 3) {
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.NORTE);
			checarCelulas();
			irProximaCelula();
			atualizarCelulas();
			mudarOrientacao(Navegacao.OESTE);
			while (linha > 0) {
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.LESTE);
			Navegacao.alinhar();
			setMapearZigZag(true);
		} // mapear proximo da parede esquerda reta meio
		else if (paredeAleatoria[3].temParede()) {
			setMapearZigZag(false);
			mudarOrientacao(Navegacao.OESTE);
			Navegacao.setAngAnterior(angulo);
			while (linha > 0) {
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.LESTE);
			Navegacao.alinhar();
			while (linha < 5) {
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
			}
			Navegacao.parar();
			mudarOrientacao(Navegacao.NORTE);
			checarCelulas();
			irProximaCelula();
			atualizarCelulas();
			mudarOrientacao(Navegacao.LESTE);
			while (linha < 8) {
				checarCelulas();
				irProximaCelula();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.NORTE);
			checarCelulas();
			irProximaCelula();
			atualizarCelulas();
			mudarOrientacao(Navegacao.OESTE);
			Navegacao.alinhar();
			setMapearZigZag(true);
		} // mapear proximo da parede esquerda diagonal cima
		else if (paredeAleatoria[4].temParede()) {
			if (coluna == 7 && linha == 4) {
				setMapearZigZag(false);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				mudarOrientacao(Navegacao.NORTE);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				mudarOrientacao(Navegacao.LESTE);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				setMapearZigZag(true);
			} else {
				setMapearZigZag(false);
				mudarOrientacao(Navegacao.SUL);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				mudarOrientacao(Navegacao.LESTE);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				mudarOrientacao(Navegacao.SUL);
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
				mudarOrientacao(Navegacao.OESTE);
				while (linha > 0) {
					irProximaCelula();
					checarCelulas();
					atualizarCelulas();
				}
				mudarOrientacao(Navegacao.LESTE);
				Navegacao.alinhar();
				setMapearZigZag(true);
			}
		} // mapear proximo da parede reta meio cima
		else if (paredeAleatoria[5].temParede()) {
			setMapearZigZag(false);
			mudarOrientacao(Navegacao.NORTE);
			while (coluna < 8) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.OESTE);
			while (linha > 0) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			Navegacao.ré();
			Delay.msDelay(500);
			mudarOrientacao(Navegacao.SUL);
			Navegacao.alinhar();
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.LESTE);
			Navegacao.alinhar();
			while (linha < 3) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.SUL);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.OESTE);
			while (linha > 0) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			Navegacao.ré();
			Delay.msDelay(500);
			mudarOrientacao(Navegacao.SUL);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.LESTE);
			Navegacao.alinhar();
			while (linha < 3) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.SUL);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.LESTE);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.NORTE);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.LESTE);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			setMapearZigZag(true);
		} // mapear proximo da parede direita diagonal cima
		else if (paredeAleatoria[6].temParede()) {
			setMapearZigZag(false);
			mudarOrientacao(Navegacao.NORTE);
			while (coluna < 8) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.OESTE);
			while (linha > 0) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			Navegacao.ré();
			Delay.msDelay(500);
			mudarOrientacao(Navegacao.SUL);
			Navegacao.alinhar();
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.LESTE);
			Navegacao.alinhar();
			while (linha < 3) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.SUL);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.OESTE);
			while (linha > 0) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			Navegacao.ré();
			Delay.msDelay(500);
			mudarOrientacao(Navegacao.SUL);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.LESTE);
			Navegacao.alinhar();
			while (linha < 4) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.NORTE);
			while (coluna < 8) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			Navegacao.ré();
			Delay.msDelay(500);
			mudarOrientacao(Navegacao.LESTE);
			while (linha < 7) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			Navegacao.setVelocidade(velocidadeMenor);
			Navegacao.andarGraus(-tamanhoDaCelula);
			Navegacao.setVelocidade(velocidadeMaior);
			linha--;
			Navegacao.parar();
			Delay.msDelay(100);
			mudarOrientacao(Navegacao.SUL);
			Navegacao.alinhar();
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.OESTE);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.SUL);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.OESTE);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.SUL);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.LESTE);
			while (linha < 8) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.NORTE);
			while (coluna < 7) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			Navegacao.setVelocidade(velocidadeMenor);
			Navegacao.andarGraus(-tamanhoDaCelula);
			Navegacao.setVelocidade(velocidadeMaior);
			coluna--;
			Navegacao.parar();
			Delay.msDelay(100);
			mudarOrientacao(Navegacao.OESTE);
			Navegacao.alinhar();
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
			mudarOrientacao(Navegacao.SUL);
			irProximaCelula();
			checarCelulas();
			atualizarCelulas();
		}
	}

	/**
	 * seta como ocupado as celulas que contem a parede
	 * 
	 * @param posicao
	 */

	private static void setarParede(Posicao posicao) {
		if (posicao.x == paredeAleatoria[0].getPosicao().x
				&& posicao.y == paredeAleatoria[0].getPosicao().y) {
			paredeAleatoria[0].setParede(true);
			Mapa[0][0].setChecked(true);
			Mapa[0][0].setOccupied(true);
			Mapa[0][0].setParede(true);
			Mapa[1][1].setChecked(true);
			Mapa[1][1].setOccupied(true);
			Mapa[1][1].setParede(true);
			Mapa[2][2].setChecked(true);
			Mapa[2][2].setOccupied(true);
			Mapa[2][2].setParede(true);
			Mapa[3][3].setChecked(true);
			Mapa[3][3].setOccupied(true);
			Mapa[3][3].setParede(true);
		} else if (posicao.x == paredeAleatoria[1].getPosicao().x
				&& posicao.y == paredeAleatoria[1].getPosicao().y) {
			paredeAleatoria[1].setParede(true);
			Mapa[8][0].setChecked(true);
			Mapa[8][0].setOccupied(true);
			Mapa[8][0].setParede(true);
			Mapa[7][1].setChecked(true);
			Mapa[7][1].setOccupied(true);
			Mapa[7][1].setParede(true);
			Mapa[6][2].setChecked(true);
			Mapa[6][2].setOccupied(true);
			Mapa[6][2].setParede(true);
			Mapa[5][3].setChecked(true);
			Mapa[5][3].setOccupied(true);
			Mapa[5][3].setParede(true);
		} else if (posicao.x == paredeAleatoria[2].getPosicao().x
				&& posicao.y == paredeAleatoria[2].getPosicao().y) {
			paredeAleatoria[2].setParede(true);
			Mapa[8][4].setChecked(true);
			Mapa[8][4].setOccupied(true);
			Mapa[8][4].setParede(true);
			Mapa[7][4].setChecked(true);
			Mapa[7][4].setOccupied(true);
			Mapa[7][4].setParede(true);
			Mapa[6][4].setChecked(true);
			Mapa[6][4].setOccupied(true);
			Mapa[6][4].setParede(true);
			Mapa[5][4].setChecked(true);
			Mapa[5][4].setOccupied(true);
			Mapa[5][4].setParede(true);
			Mapa[4][4].setChecked(true);
			Mapa[4][4].setOccupied(true);
			Mapa[4][4].setParede(true);
		} else if (posicao.x == paredeAleatoria[3].getPosicao().x
				&& posicao.y == paredeAleatoria[3].getPosicao().y) {
			paredeAleatoria[3].setParede(true);
			Mapa[0][4].setChecked(true);
			Mapa[0][4].setOccupied(true);
			Mapa[0][4].setParede(true);
			Mapa[1][4].setChecked(true);
			Mapa[1][4].setOccupied(true);
			Mapa[1][4].setParede(true);
			Mapa[2][4].setChecked(true);
			Mapa[2][4].setOccupied(true);
			Mapa[2][4].setParede(true);
			Mapa[3][4].setChecked(true);
			Mapa[3][4].setOccupied(true);
			Mapa[3][4].setParede(true);
			Mapa[4][4].setChecked(true);
			Mapa[4][4].setOccupied(true);
			Mapa[4][4].setParede(true);
		} else if (posicao.x == paredeAleatoria[4].getPosicao().x
				&& posicao.y == paredeAleatoria[4].getPosicao().y) {
			paredeAleatoria[4].setParede(true);
			Mapa[0][8].setChecked(true);
			Mapa[0][8].setOccupied(true);
			Mapa[0][8].setParede(true);
			Mapa[1][7].setChecked(true);
			Mapa[1][7].setOccupied(true);
			Mapa[1][7].setParede(true);
			Mapa[2][6].setChecked(true);
			Mapa[2][6].setOccupied(true);
			Mapa[2][6].setParede(true);
			Mapa[3][5].setChecked(true);
			Mapa[3][5].setParede(true);
			Mapa[3][5].setOccupied(true);
		} else if (posicao.x == paredeAleatoria[5].getPosicao().x
				&& posicao.y == paredeAleatoria[5].getPosicao().y) {
			paredeAleatoria[5].setParede(true);
			Mapa[4][8].setChecked(true);
			Mapa[4][8].setOccupied(true);
			Mapa[4][8].setParede(true);
			Mapa[4][7].setChecked(true);
			Mapa[4][7].setOccupied(true);
			Mapa[4][7].setParede(true);
			Mapa[4][6].setChecked(true);
			Mapa[4][6].setOccupied(true);
			Mapa[4][6].setParede(true);
			Mapa[4][5].setChecked(true);
			Mapa[4][5].setParede(true);
			Mapa[4][5].setOccupied(true);
			Mapa[4][4].setChecked(true);
			Mapa[4][4].setParede(true);
			Mapa[4][4].setOccupied(true);
		} else if (posicao.x == paredeAleatoria[6].getPosicao().x
				&& posicao.y == paredeAleatoria[6].getPosicao().y) {
			paredeAleatoria[6].setParede(true);
			Mapa[8][8].setChecked(true);
			Mapa[8][8].setOccupied(true);
			Mapa[8][8].setParede(true);
			Mapa[7][7].setChecked(true);
			Mapa[7][7].setOccupied(true);
			Mapa[7][7].setParede(true);
			Mapa[6][6].setChecked(true);
			Mapa[6][6].setOccupied(true);
			Mapa[6][6].setParede(true);
			Mapa[5][5].setChecked(true);
			Mapa[5][5].setParede(true);
			Mapa[5][5].setOccupied(true);
		}
	}

	/**
	 * Atualiza para a matriz da proxima sala
	 */
	public static void atualizarSala() {
		switch (salaAtual) {
		case MODULOINICIAL:
			salaAtual = SALACENTRAL;
			linha = linhaInicial;
			coluna = colunaInicial;
			Mapa = MapaCentral;
			System.out.println("SALA CENTRAL");
			break;
		case SALACENTRAL:
			MapaCentral = Mapa;
			if (Navegacao.orientacaoAtual == Navegacao.SUL) {
				salaAtual = MODULOINICIAL;
				System.out.println("MODULO INICIAL");
			} else {
				salaAtual = SALAPERIFERICA;
				Mapa = MapaPeriferico;
				linha = linhaInicial;
				coluna = colunaInicial;
				Navegacao.orientacaoAtual = Navegacao.NORTE;

				Navegacao.parar();
				while (!Button.ENTER.isDown()) {
					System.out.println("Aperte ENTER para retornar");
				}
				Delay.msDelay(500);
				Navegacao.setAngAnterior(Navegacao.getAnguloAtual());
				System.out.println("SALA PERIFERICA");
			}
			break;
		case SALAPERIFERICA:
			MapaPeriferico = Mapa;
			salaAtual = SALACENTRAL;
			Mapa = MapaCentral;
			linha = 0;
			coluna = 4;
			Navegacao.orientacaoAtual = Navegacao.LESTE;

			Navegacao.parar();
			while (!Button.ENTER.isDown())
				System.out.println("Aperte ENTER para retornar");
			Delay.msDelay(500);
			Navegacao.setAngAnterior(Navegacao.getAnguloAtual());
			System.out.println("SALA CENTRAL");
			break;
		}
		/*
		 * Navegacao.parar(); while (!Button.UP.isDown()) {
		 * System.out.println("APERTE CIMA PARA RETORNAR"); }
		 * Delay.msDelay(500);
		 */
	}

	/**
	 * verificar o que há na celula
	 * 
	 * @return Conteudo da celula
	 * @throws Exception
	 */

	private static int verificarConteudo() throws Exception {
		if (Reconhecimento.getDistancia() <= 0.1 && Captura.getGarraAberta()
				&& !estaNaParede) {
			// se houver algo alem da parede a 15 cm
			Navegacao.setVelocidade(velocidadeMenor);
			double distanciaBoneco = Reconhecimento.getDistancia();
			Navegacao.andarGraus(distanciaBoneco - 0.02);
			// andar o quanto falta para chegar no alvo
			Navegacao.parar();
			Captura.fecharGarra();
			if (!Reconhecimento.getPreto()) {
				Button.LEDPattern(2);
				Mapa[linha][coluna].setChecked(true);
				Mapa[linha][coluna].setOccupied(true);
				return bonecoNaoPreto;
			} else {
				Button.LEDPattern(1);
				Mapa[linha][coluna].setChecked(true);
				return bonecoPreto;
			}
		} else {
			Navegacao.setVelocidade(velocidadeMaior);
			Mapa[linha][coluna].setChecked(true);
			Button.LEDPattern(0);
			return vazio;
		}
	}

	/**
	 * Inicializa o mapa com todas as posicoes ocupadas
	 */
	public static void inicializarMapa() {
		for (int i = 0; i < numLinhas; i++) {
			for (int j = 0; j < numColunas; j++) {
				Mapa[i][j] = new Celula(new Posicao(i, j));
				Mapa[i][j].setChecked(false);
				Mapa[i][j].setOccupied(true);
			}
		}
		MapaCentral = Mapa;
		MapaPeriferico = Mapa;
	}

	/**
	 * Retorna para a posicao desejada, pelo menor caminho possível
	 * @param Posicao
	 *            objetivo
	 */
	private static void retornar(Posicao objetivo) throws Exception {
		Astar aStar = new Astar(Mapa);
		atual = Mapa[linha][coluna].getPosicao();

		if (resgatando) {
			if (salaAtual == SALACENTRAL) {
				ultMapeadaCentral = atual;
				ultOrientacaoCentral = Navegacao.orientacaoAtual;
			} else if (salaAtual == SALAPERIFERICA) {
				ultMapeadaPeriferica = atual;
				ultOrientacaoPeriferica = Navegacao.orientacaoAtual;
			}
		}
		List<Celula> caminho = aStar.search(atual, objetivo);
		// Percorre o menor caminho encontrado
		for (int i = 0; i < caminho.size(); i++) {
			atual = Mapa[linha][coluna].getPosicao();
			if (caminho.get(i).getPosicao().y == atual.y) {
				if (caminho.get(i).getPosicao().x < atual.x) {
					mudarOrientacao(Navegacao.OESTE);
				} else {
					mudarOrientacao(Navegacao.LESTE);
				}
			} else if (caminho.get(i).getPosicao().x == atual.x) {
				if (caminho.get(i).getPosicao().y < atual.y) {
					mudarOrientacao(Navegacao.SUL);
				} else {
					mudarOrientacao(Navegacao.NORTE);
				}
			}
			if (((linha == 0 && Navegacao.orientacaoAtual == Navegacao.LESTE)
					|| (linha == 8 && Navegacao.orientacaoAtual == Navegacao.OESTE)
					|| (coluna == 8 && Navegacao.orientacaoAtual == Navegacao.SUL) || (coluna == 0 && Navegacao.orientacaoAtual == Navegacao.NORTE))
					&& linha != 4) {
				Navegacao.alinhar();
			}
			irProximaCelula();
			atualizarCelulas();
		}

		if (resgatando && salaAtual == SALAPERIFERICA) {
			ultSala = SALAPERIFERICA;
			mudarOrientacao(Navegacao.SUL);
			Navegacao.irProxSala();
			Navegacao.andarFrente();
			Delay.msDelay(1200);
			atualizarSala();
			while (linha < 4) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
			mudarOrientacao(Navegacao.SUL);
			while (coluna > 0) {
				irProximaCelula();
				checarCelulas();
				atualizarCelulas();
			}
		}
		if (resgatando) {
			deixarBonecoDestino();
			resgatando = false;
			retornandoMapeamento = true;
			if (ultSala == SALAPERIFERICA) {
				mudarOrientacao(Navegacao.NORTE);
				irPerifericaEsquerda();
				retornar(ultMapeadaPeriferica);
				if (Navegacao.orientacaoAtual != ultOrientacaoPeriferica)
					mudarOrientacao(ultOrientacaoPeriferica);
			} else {
				retornar(ultMapeadaCentral);
				if (Navegacao.orientacaoAtual != ultOrientacaoCentral)
					mudarOrientacao(ultOrientacaoCentral);
			}
			retornandoMapeamento = false;
		}
		Captura.abrirGarra();
	}

	/**
	 * Anda até a proxima celula
	 */
	public static void irProximaCelula() throws Exception {
		Navegacao.setVelocidade(velocidadeMaior);
		long tempoInicio = System.currentTimeMillis();
		double angAnterior = Navegacao.getAngAnterior();
		double distanciaPercorrida = Navegacao.getDistPercorrida();
		while (distanciaPercorrida <= tamanhoDaCelula) {
			Navegacao.andarFrente(angAnterior);
			distanciaPercorrida = Navegacao.getDistPercorrida();
			if ((System.currentTimeMillis() - tempoInicio) > 5000) {
				Navegacao.parar();
				Navegacao.ré();
				Delay.msDelay(1000);
				Navegacao.parar();
				Navegacao.resetarTacometro();
				tempoInicio = System.currentTimeMillis();
			}
		}
		Navegacao.resetarTacometro();
	}


	/**
	 * Mudar para a orientacao desejada
	 * @param orientacao
	 */
	private static void mudarOrientacao(int orientacao) {
		switch (orientacao) {
		case (Navegacao.LESTE):
			switch (Navegacao.orientacaoAtual) {
			case (Navegacao.NORTE):
				Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
				break;
			case (Navegacao.OESTE):
				if (coluna != 0) {
					Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
					Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
				} else {
					Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
					Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
				}
				break;
			case (Navegacao.SUL):
				Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
				break;
			}
			Navegacao.orientacaoAtual = Navegacao.LESTE;
			break;
		case (Navegacao.OESTE):
			switch (Navegacao.orientacaoAtual) {
			case (Navegacao.NORTE):
				Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
				break;
			case (Navegacao.LESTE):
				if (coluna != 0) {
					Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
					Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);

				} else {
					Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
					Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
				}
				break;
			case (Navegacao.SUL):
				Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
				break;
			}
			Navegacao.orientacaoAtual = Navegacao.OESTE;
			break;
		case (Navegacao.NORTE):
			switch (Navegacao.orientacaoAtual) {
			case (Navegacao.OESTE):
				Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
				break;
			case (Navegacao.LESTE):
				Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
				break;
			case (Navegacao.SUL):
				if (linha != 0) {
					Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
					Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
				} else {
					Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
					Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
				}
				break;
			}
			Navegacao.orientacaoAtual = Navegacao.NORTE;
			break;

		case (Navegacao.SUL):
			switch (Navegacao.orientacaoAtual) {
			case (Navegacao.OESTE):
				Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
				break;
			case (Navegacao.LESTE):
				Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
				break;
			case (Navegacao.NORTE):
				if (linha != 8) {
					Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
					Navegacao.virarDuasRodasDir(angCurva, velocidadeCurva);
				} else {
					Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
					Navegacao.virarDuasRodasEsq(angCurva, velocidadeCurva);
				}
				break;
			}
			Navegacao.orientacaoAtual = Navegacao.SUL;
			break;
		}
		Navegacao.setVelocidade(velocidadeMaior);
	}


	/**
	 * Deixar o boneco no modulo inicial
	 * 
	 * @throws Exception
	 */
	private static void deixarBonecoDestino() throws Exception {
		mudarOrientacao(Navegacao.SUL);
		Navegacao.irProxSala();
		Delay.msDelay(1000);
		atualizarSala();
		Navegacao.parar();
		Captura.abrirGarra();
		while (!Navegacao.mudouDeSala)
			Navegacao.ré();
		Delay.msDelay(2000);
		resgatando = false;
		atualizarSala();
		Captura.fecharGarra();
		Navegacao.resetarTacometro();
	}
}
