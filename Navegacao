package salaParedeDireita;

import lejos.hardware.Button;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.MotorPort;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.EV3GyroSensor;
import lejos.robotics.SampleProvider;
import lejos.utility.Delay;

public class Navegacao implements Runnable {
	private static EV3LargeRegulatedMotor motorEsq = new EV3LargeRegulatedMotor(
			MotorPort.B);
	private static EV3LargeRegulatedMotor motorDir = new EV3LargeRegulatedMotor(
			MotorPort.C);
	public static EV3GyroSensor gyro = new EV3GyroSensor(SensorPort.S3);
	private static EV3ColorSensor sensorCorChao = new EV3ColorSensor(
			SensorPort.S4);
	// private static boolean tocado = false;
	private static final double RAIO_RODA = 0.028; // metros
	// private static final double DISTANCIA_RODAS = 0.137; // metros
	private static int velocidadeMenor = 100;
	private static int velocidadeCurva = 80;
	private static int velocidadeMaior = (int) (motorDir.getMaxSpeed() * 0.6);
	private static int angCurva = 87;
	public static final int LESTE = 0;
	public static final int NORTE = 1;
	public static final int OESTE = 2;
	public static final int SUL = 3;
	public static int orientacaoAtual = NORTE;
	private static double anguloAtual;
	public static boolean mudouDeSala = false;
	public static boolean virouEsq = false;
	public static boolean virouDir = false;
	private static double angAnterior;
	public static double angNorte;
	public static double angSul;
	public static double angLeste;
	public static double angOeste;
	private static boolean inverterNavegacao = false;

	public Navegacao() {
		resetarTacometro();
	}

	public static void andarFrente() {
		setVelocidade(velocidadeMaior);
		motorEsq.forward();
		motorDir.forward();
	}

	/**
	 * anda para frente
	 */
	public static void andarFrente(double ang) {
		if (anguloAtual > ang + 5 || anguloAtual < ang - 5) {
			setVelocidade(velocidadeMenor);
			parar();
			while (anguloAtual > ang + 5) {
				motorEsq.forward();
				motorDir.backward();
			}
			while (anguloAtual < ang - 5) {
				motorEsq.backward();
				motorDir.forward();
			}
			resetarTacometro();
		}
		setVelocidade(velocidadeMaior);
		motorEsq.forward();
		motorDir.forward();
	}

	/**
	 * @return velocidadeMenor
	 */
	public static int getVelocidadeMenor() {
		return velocidadeMenor;
	}

	/**
	 * @return velocidadeMaior
	 */
	public static int getVelocidadeMaior() {
		return velocidadeMaior;
	}

	/**
	 * @return velocidadeMaior
	 */
	public static int getVelocidadeCurva() {
		return velocidadeCurva;
	}

	/**
	 * 
	 * @return angCurva
	 */
	public static int getAnguloCurva() {
		return angCurva;
	}

	/**
	 * seta um valor para o angAnterior
	 * 
	 * @param ang
	 */
	public static void setAngAnterior(double ang) {
		angAnterior = ang;
	}

	/**
	 * @return angAnterior
	 */

	public static double getAngAnterior() {
		return angAnterior;
	}

	/**
	 * seta a leitura dos tacometros como zero
	 */
	public static void resetarTacometro() {
		motorEsq.resetTachoCount();
		motorDir.resetTachoCount();
	}

	public static double getAnguloAtual() {
		return anguloAtual;
	}

	/**
	 * gira em cada roda o angulo necessario para chegar na distancia
	 * requisitada
	 * 
	 * @param distancia
	 */
	public static void andarGraus(double distancia) {
		int angulo = (int) (180 * (distancia) / (Math.PI * RAIO_RODA));
		motorEsq.rotate(angulo, true);
		motorDir.rotate(angulo);
	}

	/**
	 * Para os dois motores
	 */
	public static void parar() {
		motorEsq.stop(true);
		motorDir.stop();
	}

	/**
	 * anda para trás
	 */
	public static void ré() {
		setVelocidade(velocidadeMenor);
		motorEsq.backward();
		motorDir.backward();
	}

	/**
	 * alinhar o robô na parede
	 */
	public static void alinhar() {
		setVelocidade(300);
		motorEsq.backward();
		motorDir.backward();
		Delay.msDelay(1500);
		parar();
		resetarTacometro();
		angAnterior = anguloAtual;
	}

	/**
	 * retorna a flag inverter navegacao
	 * 
	 * @return
	 */
	public static boolean getInverterNavegacao() {
		return inverterNavegacao;
	}

	/**
	 * seta a flag inverter navegacao como true
	 * 
	 * @param inverter
	 */

	public static void setInverterNavegacao(boolean inverter) {
		inverterNavegacao = inverter;
	}

	/**
	 * Vira quando encontrar a parede
	 */

	public static void virarParede() {
		if (orientacaoAtual == OESTE) {
			if (!inverterNavegacao)
				virarDuasRodasDir(angCurva, velocidadeCurva);
			else
				virarDuasRodasEsq(angCurva, velocidadeCurva);
		} else if (orientacaoAtual == LESTE) {
			if (!inverterNavegacao)
				virarDuasRodasEsq(angCurva, velocidadeCurva);
			else
				virarDuasRodasDir(angCurva, velocidadeCurva);
		}
		angAnterior = anguloAtual;
	}

	/**
	 * Vira de forma que o robô navegue em zig zag
	 */
	public static void virarZigZag() {
		parar();
		if (orientacaoAtual == NORTE) {
			if (!inverterNavegacao) {
				if (virouDir) {
					virarDuasRodasDir(angCurva, velocidadeCurva);
				} else {
					virarDuasRodasEsq(angCurva, velocidadeCurva);
				}
			} else {
				if (virouDir) {
					virarDuasRodasEsq(angCurva, velocidadeCurva);
				} else {
					virarDuasRodasDir(angCurva, velocidadeCurva);
				}
			}
		} else if (orientacaoAtual == SUL) {
			if (!inverterNavegacao) {
				if (virouEsq) {
					virarDuasRodasDir(angCurva, velocidadeCurva);
				} else {
					virarDuasRodasEsq(angCurva, velocidadeCurva);
				}
			} else {
				if (virouEsq) {
					virarDuasRodasEsq(angCurva, velocidadeCurva);
				} else {
					virarDuasRodasDir(angCurva, velocidadeCurva);
				}
			}
		}
		angAnterior = anguloAtual;
	}

	/**
	 * gira o angulo necessario com uma roda pra frente e outra pra tras em
	 * torno do eixo do robo
	 * 
	 * @param ang
	 * @param vel
	 */
	public static void virarDuasRodasEsq(int ang, int vel) {
		setVelocidade(vel);
		double anguloAnterior = anguloAtual;
		long tempoInicio = System.currentTimeMillis();
		while (true) {
			if ((Math.abs(anguloAnterior - anguloAtual) < ang - 1)) {
				motorEsq.backward();
				motorDir.forward();
			} else if ((Math.abs(anguloAnterior - anguloAtual) > ang + 1)) {
				motorEsq.forward();
				motorDir.backward();
			} else {
				parar();
				break;
			}
			if ((System.currentTimeMillis() - tempoInicio) > 5000) {
				parar();
				ré();
				Delay.msDelay(1000);
				parar();
				tempoInicio = System.currentTimeMillis();
			}
		}
		virouEsq = true;
		virouDir = false;
		resetarTacometro();
		proximaDirecao();
		angAnterior = anguloAtual;
	}

	/**
	 * gira o angulo necessario com uma roda pra frente e outra pra tras em
	 * torno do eixo do robo
	 * 
	 * @param ang
	 * @param vel
	 */
	public static void virarDuasRodasDir(int ang, int vel) {
		setVelocidade(vel);
		double anguloAnterior = anguloAtual;
		long tempoInicio = System.currentTimeMillis();
		while (true) {
			if ((Math.abs(anguloAnterior - anguloAtual) < ang - 1)) {
				motorEsq.forward();
				motorDir.backward();
			} else if ((Math.abs(anguloAnterior - anguloAtual) > ang + 1)) {
				motorEsq.backward();
				motorDir.forward();
			} else {
				parar();
				break;
			}
			if ((System.currentTimeMillis() - tempoInicio) > 5000) {
				parar();
				ré();
				Delay.msDelay(1000);
				parar();
				tempoInicio = System.currentTimeMillis();
			}
		}
		virouDir = true;
		virouEsq = false;
		resetarTacometro();
		proximaDirecao();
		angAnterior = anguloAtual;
	}

	/**
	 * anda para frente até que mude de sala
	 */
	public static void irProxSala() {
		long tempoInicio = System.currentTimeMillis();
		setVelocidade(2 * velocidadeMenor);
		double anguloAnterior = anguloAtual;
		while (!mudouDeSala) {
			andarFrente(anguloAnterior);
			if ((System.currentTimeMillis() - tempoInicio) > 3000) {
				parar();
				ré();
				Delay.msDelay(500);
				parar();
				virarDuasRodasDir(angCurva, velocidadeCurva);
				anguloAnterior = getAngAnterior();
				andarFrente(anguloAnterior);
				Delay.msDelay(1000);
				virarDuasRodasEsq(angCurva, velocidadeCurva);
				anguloAnterior = getAngAnterior();
				tempoInicio = System.currentTimeMillis();
				while (!mudouDeSala){
					andarFrente(anguloAnterior);
					if ((System.currentTimeMillis() - tempoInicio) > 3000) {
						parar();
						ré();
						Delay.msDelay(500);
						parar();
						virarDuasRodasEsq(angCurva, velocidadeCurva);
						anguloAnterior = getAngAnterior();
						andarFrente(anguloAnterior);
						Delay.msDelay(2000);
						virarDuasRodasDir(angCurva, velocidadeCurva);
						anguloAnterior = getAngAnterior();
						while (!mudouDeSala)
							andarFrente(anguloAnterior);
					}
				}
					
			}
		}
		resetarTacometro();
	}

	/**
	 * seta velocidade nos dois motores
	 * 
	 * @param vel
	 */
	public static void setVelocidade(int vel) {
		motorEsq.setSpeed(vel);
		motorDir.setSpeed(vel);
	}

	/**
	 * retorna a distancia percorrida pelo robô de acordo com o tacometro
	 * 
	 * @return distancia percorrida
	 */
	public static double getDistPercorrida() {
		double angEsq = motorEsq.getTachoCount();
		double dist = RAIO_RODA * angEsq * (Math.PI / 180);
		return dist;
	}

	/**
	 * Leitura dos sensores
	 */
	private static void amostragem() {
		SampleProvider corChao = sensorCorChao.getColorIDMode();
		float amostraCorChao[] = new float[corChao.sampleSize()];
		corChao.fetchSample(amostraCorChao, 0);

		SampleProvider Gyro = gyro.getAngleMode();
		float amostraGyro[] = new float[Gyro.sampleSize()];
		Gyro.fetchSample(amostraGyro, 0);
		anguloAtual = amostraGyro[0];

		if (amostraCorChao[0] == 6) // Branco
			mudouDeSala = false;
		else if (amostraCorChao[0] == 7) // Preto
			mudouDeSala = true;
	}

	/**
	 * Atualiza a direção de acordo com o sentido que o robo virou
	 */

	public static void proximaDirecao() {
		switch (orientacaoAtual) {
		case NORTE:
			if (virouEsq)
				orientacaoAtual = OESTE;
			else if (virouDir)
				orientacaoAtual = LESTE;
			break;
		case SUL:
			if (virouEsq)
				orientacaoAtual = LESTE;
			else if (virouDir)
				orientacaoAtual = OESTE;
			break;
		case LESTE:
			if (virouEsq)
				orientacaoAtual = NORTE;
			else if (virouDir)
				orientacaoAtual = SUL;
			break;
		case OESTE:
			if (virouEsq)
				orientacaoAtual = SUL;
			else if (virouDir)
				orientacaoAtual = NORTE;
			break;
		default:
			break;
		}
	}

	@Override
	public void run() {
		while (!Button.ESCAPE.isDown()) {
			amostragem();
		}
	}
}
