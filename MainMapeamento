import java.util.List;

import lejos.hardware.Button;
import lejos.hardware.Sound;
import lejos.utility.Delay;

public class MainMapeamento {
	Navegacao navegacao = new Navegacao();
	private static int numLinhas = 9;
	private static int numColunas = 9;
	private static Celula[][] Mapa = new Celula[numLinhas][numColunas];
	private static int linha = 4;
	private static int coluna = 0;
	private static Posicao inicio = new Posicao(linha, coluna);

	// private static int naoMapeado = -1;
	private static int vazio = 0;
	private static int bonecoPreto = 1;
	private static int bonecoBranco = 2;
	private static int Parede = 3;
	private static boolean virouEsq = false;
	private static boolean primeiraCurva = false;

	private static boolean estaNaParede = false;
	private static boolean celulaEsq = false;
	private static boolean celulaDir = false;
	private static boolean celulaBaixo = false;
	private static boolean celulaCima = false;
	private static boolean resgatando = false;
	private static boolean retornandoMapeamento = false;
	private static int velocidadeMaior = 400;
	private static int velocidadeMenor = 200;
	private static int angRetoMaior = 95;
	private static int angRetoMenor = 85;
	private static int angRasoMaior = 185;
	private static int angRasoMenor = 180;

	public static void main(String[] args) throws Exception {
		init();
		inicializarMapa();
		while (!Navegacao.mudouDeSala && !Button.ESCAPE.isDown()) {
			Navegacao.andarFrente();
		}
		Delay.msDelay(1300);
		Navegacao.parar();
		Navegacao.virarDuasRodasDir(85, 100); // entra na pista e vira a direita

		while (!Button.ESCAPE.isDown()) {
			if (!Mapa[linha][coluna].isChecked()) {
				int conteudo = verificarConteudo();
				if (conteudo == vazio) {
					Mapa[linha][coluna].setOccupied(false);
				}
				if (conteudo == bonecoPreto) {
					Navegacao.parar();
					Delay.msDelay(1000);
					Mapa[linha][coluna].setOccupied(false);
					resgatando = true;
					retornar(inicio);
				}
				System.out.println("[" + linha + ", " + coluna + "]");
			}
			Navegacao.andarFrente();
			double distanciaPercorrida = Navegacao.getDistPercorrida();
			if (distanciaPercorrida >= 0.2)
				atualizarCelulas();
		}
	}

	private static void atualizarCelulas() {
		// Navegacao.parar();
		switch (Navegacao.orientacaoAtual) {
		case Navegacao.LESTE:
			linha++;
			System.out.println("LESTE");
			break;
		case Navegacao.OESTE:
			System.out.println("OESTE");
			linha--;
			break;
		case Navegacao.NORTE:
			coluna++;
			System.out.println("NORTE");
			Navegacao.parar();
			// Se a ultima vez que virou foi a esquerda agora vira a
			// direita
			if (!resgatando && !retornandoMapeamento) {
				if (virouEsq) {
					Navegacao.virarDuasRodasDir(85, 100);
					Navegacao.alinhar();
					virouEsq = false;
				} else {
					Navegacao.virarDuasRodasEsq(85, 100);
					Navegacao.alinhar();
					virouEsq = true;
				}
			}
			break;
		case Navegacao.SUL:
			coluna--;
			System.out.println("SUL");
			if (!resgatando && !retornandoMapeamento) {
				if (virouEsq) {
					Navegacao.virarDuasRodasDir(85, 100);
					Navegacao.alinhar();
					virouEsq = false;
				} else {
					Navegacao.virarDuasRodasEsq(85, 100);
					Navegacao.alinhar();
					virouEsq = true;
				}
			}
			break;
		default:
			break;
		}
		if (linha == 8 && coluna == 8) {
			Navegacao.parar();
			Captura.abrirGarra();
			System.exit(0);
		}

		if ((linha == 0 && Navegacao.orientacaoAtual == Navegacao.OESTE)
				|| (linha == 8 && Navegacao.orientacaoAtual == Navegacao.LESTE)
				|| (coluna == 8 && Navegacao.orientacaoAtual == Navegacao.NORTE)
				|| (coluna == 0 && Navegacao.orientacaoAtual == Navegacao.SUL)) {
			estaNaParede = true;
			Sound.beep();
		} else {
			estaNaParede = false;
		}

		if (estaNaParede && !resgatando) {
			Navegacao.parar();
			Navegacao.ré();
			Delay.msDelay(800);
			if (virouEsq) {
				Navegacao.virarDuasRodasDir(85, 100);
				if (linha == 8 && coluna == 0)
					Navegacao.alinhar();
			} else {
				Navegacao.virarDuasRodasEsq(85, 100);
				if (!primeiraCurva) {
					Navegacao.alinhar();
					primeiraCurva = true;
				}
			}
			estaNaParede = false;
		}
		Navegacao.resetarTacometro();
	}

	private static void inicializarMapa() {
		for (int i = 0; i < numLinhas; i++) {
			for (int j = 0; j < numColunas; j++) {
				Mapa[i][j] = new Celula(new Posicao(i, j));
				Mapa[i][j].setChecked(false);
				Mapa[i][j].setOccupied(true);
			}
		}
	}

	/*
	 * private static int getProxCelula() { switch
	 * (Navegacao.ORIENTACAO[Navegacao.indiceOrientacao]) { case
	 * Navegacao.LESTE: return Mapa[linha + 1][coluna]; case Navegacao.OESTE:
	 * return Mapa[linha - 1][coluna]; case Navegacao.NORTE: return
	 * Mapa[linha][coluna + 1]; case Navegacao.SUL: return Mapa[linha][coluna -
	 * 1]; default: return Mapa[linha][coluna]; } }
	 */

	private static int verificarConteudo() {
		if (Reconhecimento.getDistancia() <= 0.25 && Captura.getGarraAberta()) {
			// Se houver algo a 25 cm reduz velocidade
			Navegacao.setAceleracao(-5000);
		} else {
			// Se não acelera!!!
			Navegacao.setAceleracao(5000);
		}

		if (Reconhecimento.getDistancia() <= 0.15 && Captura.getGarraAberta() 
				&& !estaNaParede) {
			//se houver algo alem da parede a 15 cm
			Navegacao.setVelocidade(velocidadeMenor);
			double distanciaBoneco = Reconhecimento.getDistancia();
			Navegacao.andarGraus(distanciaBoneco - 0.05);
			// andar o quanto falta para chegar no alvo
			Navegacao.parar();
			if (Navegacao.getToque()) {
				Mapa[linha][coluna].setChecked(true);
				return Parede;
			} else {
				Captura.fecharGarra();
				if (!Reconhecimento.getPreto()) {
					Button.LEDPattern(2);
					Captura.abrirGarra();
					Delay.msDelay(2000);
					Mapa[linha][coluna].setChecked(true);
					return bonecoBranco;
				} else {
					Button.LEDPattern(1);
					Mapa[linha][coluna].setChecked(true);
					return bonecoPreto;
				}
			}
		} else {
			Navegacao.setVelocidade(velocidadeMaior);
			Mapa[linha][coluna].setChecked(true);
			return vazio;
		}
	}

	private static Posicao ultMapeada;
	private static Posicao atual;
	private static int ultOrientacao;

	private static void retornar(Posicao objetivo) throws Exception {
		Astar aStar = new Astar(Mapa);
		atual = Mapa[linha][coluna].getPosicao();
		
		if(resgatando){
			ultMapeada = atual;
			ultOrientacao = Navegacao.orientacaoAtual;
		}
			
		List<Celula> caminho = aStar.search(Mapa[linha][coluna].getPosicao(),
				objetivo);
		// Percorre o menor caminho encontrado
		for (int i = 0; i < caminho.size(); i++) {
			System.out.println(caminho.get(i).getPosicao().toString());
			if (caminho.get(i).getPosicao().y == atual.y) {
				if (caminho.get(i).getPosicao().x < atual.x) {
					celulaEsq = true;
					System.out.println("ESQUERDA");
					celulaDir = false;
					celulaCima = false;
					celulaBaixo = false;
				} else {
					celulaDir = true;
					System.out.println("DIREITA");
					celulaEsq = false;
					celulaCima = false;
					celulaBaixo = false;
				}
			} else if (caminho.get(i).getPosicao().x == atual.x) {
				if (caminho.get(i).getPosicao().y < atual.y) {
					celulaBaixo = true;
					System.out.println("BAIXO");
					celulaDir = false;
					celulaEsq = false;
					celulaCima = false;
				} else {
					celulaCima = true;
					System.out.println("CIMA");
					celulaDir = false;
					celulaEsq = false;
					celulaBaixo = false;
				}
			} else {
				Sound.beep();
				System.exit(0);
			}
			fazerManobra(); // Faz a manobra necessaria para ir à celula
							// desejada
			Navegacao.setVelocidade(350);
			Navegacao.andarFrente();
			double distanciaPercorrida = Navegacao.getDistPercorrida();
			while (distanciaPercorrida <= 0.2)
				distanciaPercorrida = Navegacao.getDistPercorrida();
			atual = caminho.get(i).getPosicao();
			atualizarCelulas();
		}
		if (resgatando) {
			deixarBonecoDestino();
			resgatando = false;
			retornandoMapeamento = true;
			retornar(ultMapeada);
			retornandoMapeamento = false;
			 if(Navegacao.orientacaoAtual != ultOrientacao){
				 retornarUltOrientacao();
			 }
		}
	}
	
	private static void retornarUltOrientacao() {
		
	}

	private static void deixarBonecoDestino() {
		switch (Navegacao.orientacaoAtual) {
		case Navegacao.LESTE:
			Navegacao.virarDuasRodasDir(angRetoMaior, velocidadeMenor);
			break;
		case Navegacao.OESTE:
			Navegacao.virarDuasRodasEsq(angRetoMaior, velocidadeMenor);
			break;
		default:
			break;
		}
		Navegacao.setVelocidade(velocidadeMenor);
		Navegacao.andarFrente();
		Delay.msDelay(3000);
		Navegacao.parar();
		Captura.abrirGarra();
		Navegacao.ré();
		Delay.msDelay(3000);
		Navegacao.resetarTacometro();
	}

	private static void fazerManobra() {
		switch (Navegacao.orientacaoAtual) {
		case Navegacao.LESTE:
			if (celulaEsq) {
				Navegacao.parar();
				if (resgatando) {
					if (coluna == 0)
						Navegacao.virarDuasRodasEsq(angRasoMaior,
								velocidadeMenor);
					else
						Navegacao.virarDuasRodasDir(angRasoMaior,
								velocidadeMenor);
				} else {
					if (coluna == 0)
						Navegacao.virarDuasRodasEsq(angRasoMenor,
								velocidadeMenor);
					else
						Navegacao.virarDuasRodasDir(angRasoMenor,
								velocidadeMenor);
				}
				Navegacao.orientacaoAtual = Navegacao.OESTE;
			} else if (celulaDir) {
				Navegacao.setVelocidade(velocidadeMaior);
				Navegacao.andarFrente();
			} else if (celulaCima) {
				Navegacao.parar();
				if (resgatando)
					Navegacao.virarDuasRodasEsq(angRetoMaior, velocidadeMenor);
				else
					Navegacao.virarDuasRodasEsq(angRetoMenor, velocidadeMenor);
			} else if (celulaBaixo) {
				Navegacao.parar();
				if (resgatando)
					Navegacao.virarDuasRodasDir(angRetoMaior, velocidadeMenor);
				else
					Navegacao.virarDuasRodasDir(angRetoMenor, velocidadeMenor);
			}
			break;
		case Navegacao.OESTE:
			if (celulaEsq) {
				Navegacao.setVelocidade(velocidadeMaior);
				Navegacao.andarFrente();
			} else if (celulaDir) {
				Navegacao.parar();
				if (resgatando) {
					if (coluna == 0)
						Navegacao.virarDuasRodasDir(angRasoMaior,
								velocidadeMenor);
					else
						Navegacao.virarDuasRodasEsq(angRasoMaior,
								velocidadeMenor);
				} else {
					if (coluna == 0)
						Navegacao.virarDuasRodasDir(angRasoMenor,
								velocidadeMenor);
					else
						Navegacao.virarDuasRodasEsq(angRasoMenor,
								velocidadeMenor);
				}
				Navegacao.orientacaoAtual = Navegacao.LESTE;
			} else if (celulaCima) {
				Navegacao.parar();
				if (resgatando)
					Navegacao.virarDuasRodasDir(angRetoMaior, velocidadeMenor);
				else
					Navegacao.virarDuasRodasDir(angRetoMenor, velocidadeMenor);
			} else if (celulaBaixo) {
				Navegacao.parar();
				if (resgatando)
					Navegacao.virarDuasRodasEsq(angRetoMaior, velocidadeMenor);
				else
					Navegacao.virarDuasRodasEsq(angRetoMenor, velocidadeMenor);
			}
			break;
		case Navegacao.NORTE:
			if (celulaEsq) {
				Navegacao.parar();
				if (resgatando)
					Navegacao.virarDuasRodasEsq(angRetoMaior, velocidadeMenor);
				else
					Navegacao.virarDuasRodasEsq(angRetoMenor, velocidadeMenor);
			} else if (celulaDir) {
				Navegacao.parar();
				if (resgatando)
					Navegacao.virarDuasRodasDir(angRetoMaior, velocidadeMenor);
				else
					Navegacao.virarDuasRodasDir(angRetoMenor, velocidadeMenor);
			} else if (celulaCima) {
				Navegacao.setVelocidade(velocidadeMaior);
				Navegacao.andarFrente();
			} else if (celulaBaixo) {
				Navegacao.parar();
				if (resgatando) {
					if (linha == 0)
						Navegacao.virarDuasRodasDir(angRasoMaior,
								velocidadeMenor);
					else
						Navegacao.virarDuasRodasEsq(angRasoMaior,
								velocidadeMenor);
				} else {
					if (linha == 0)
						Navegacao.virarDuasRodasDir(angRasoMenor,
								velocidadeMenor);
					else
						Navegacao.virarDuasRodasEsq(angRasoMenor,
								velocidadeMenor);

				}
				Navegacao.orientacaoAtual = Navegacao.SUL;
			}
			break;
		case Navegacao.SUL:
			if (celulaEsq) {
				Navegacao.parar();
				if (resgatando)
					Navegacao.virarDuasRodasDir(angRetoMaior, velocidadeMenor);
				else
					Navegacao.virarDuasRodasDir(angRetoMenor, velocidadeMenor);
			} else if (celulaDir) {
				Navegacao.parar();
				if (resgatando)
					Navegacao.virarDuasRodasEsq(angRetoMaior, velocidadeMenor);
				else
					Navegacao.virarDuasRodasEsq(angRetoMenor, velocidadeMenor);
			} else if (celulaCima) {
				Navegacao.parar();
			 if(resgatando){	
				if (linha == 0)
					Navegacao.virarDuasRodasEsq(angRasoMaior, velocidadeMenor);
				else
					Navegacao.virarDuasRodasDir(angRasoMaior, velocidadeMenor);
			 } else {
				 if (linha == 0)
						Navegacao.virarDuasRodasEsq(angRasoMenor, velocidadeMenor);
					else
						Navegacao.virarDuasRodasDir(angRasoMenor, velocidadeMenor);
			 }
				Navegacao.orientacaoAtual = Navegacao.NORTE;
			} else if (celulaBaixo) {
				Navegacao.setVelocidade(velocidadeMaior);
				Navegacao.andarFrente();
			}
			break;
		default:
			break;
		}
	}

	private static void init() {
		Reconhecimento reconhecimento = new Reconhecimento();
		Thread thReconhecimento = new Thread(reconhecimento);
		thReconhecimento.start();
		Navegacao navegacao = new Navegacao();
		Thread thNavegacao = new Thread(navegacao);
		thNavegacao.start();
		Sound.beepSequenceUp();
		while (!Button.ENTER.isDown()) {
			System.out.println("Aperte ENTER para inciar");
		}
	}
}
