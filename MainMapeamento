import java.util.List;
import lejos.hardware.Button;
import lejos.hardware.Sound;
import lejos.utility.Delay;

public class MainMapeamento {
	Navegacao navegacao = new Navegacao();
	private static int numLinhas = 9;
	private static int numColunas = 9;
	private static Celula[][] Mapa = new Celula[numLinhas][numColunas];
	private static Posicao inicio = new Posicao(4, 0);
	private static int linha = 4;
	private static int coluna = 0;

	private static int naoMapeado = -1;
	private static int vazio = 0;
	private static int bonecoPreto = 1;
	private static int bonecoBranco = 2;
	private static int Parede = 3;
	private static boolean virouEsq = false;
	private static boolean primeiraCurva = false;

	private static boolean estaNaParede = false;
	private static boolean celulaEsq = false;
	private static boolean celulaDir = false;
	private static boolean celulaBaixo = false;
	private static boolean celulaCima = false;
	private static boolean retornando = false;
	

	public static void main(String[] args) throws Exception {
		init();
		inicializarMapa();
		while (!Navegacao.mudouDeSala) {
			Navegacao.andarFrente();
		}
		Delay.msDelay(1300);
		Navegacao.parar();
		Navegacao.virarDuasRodasDir(85); // entra na pista e vira a direita

		while (!Button.ESCAPE.isDown()) {
			if (!Mapa[linha][coluna].isChecked()) {
			int conteudo = verificarConteudo();
			if (conteudo == vazio) {
					Mapa[linha][coluna].setOccupied(false);
				}
				if (conteudo == bonecoPreto) {
					Navegacao.parar();
					Delay.msDelay(1000);
					retornar(Mapa);
				}
				System.out.println("Celula: " + linha + " " + coluna);
				System.out.println("Conteudo "+conteudo);
			}
			Navegacao.andarFrente();
			double distanciaPercorrida = Navegacao.getDistPercorrida();
			if (distanciaPercorrida >= 0.2)
				atualizarCelulas();
		}
	}

	private static void atualizarCelulas() {
			// Navegacao.parar();
			switch (Navegacao.orientacaoAtual) {
			case Navegacao.LESTE:
				linha++;
				System.out.println("LESTE");
				break;
			case Navegacao.OESTE:
				System.out.println("OESTE");
				linha--;
				break;
			case Navegacao.NORTE:
				coluna++;
				System.out.println("NORTE");
				Navegacao.parar();
				// Se a ultima vez que virou foi a esquerda agora vira a
				// direita
				if (!retornando) {
					if (virouEsq) {
						Navegacao.virarDuasRodasDir(85);
						Navegacao.alinhar();
						virouEsq = false;
					} else {
						Navegacao.virarDuasRodasEsq(85);
						Navegacao.alinhar();
						virouEsq = true;
					}
				}
				break;
			case Navegacao.SUL:
				System.out.println("SUL");
				if (!retornando) {
					Navegacao.parar();
					Navegacao.virarDir(85);
				}
				coluna--;
			default:
				break;
			}
			if (linha == 8 && coluna == 8) {
				Navegacao.parar();
				Captura.abrirGarra();
				System.exit(0);
			}

			if ((linha == 0 && Navegacao.orientacaoAtual == Navegacao.OESTE)
					|| (linha == 8 && Navegacao.orientacaoAtual == Navegacao.LESTE)
					|| (coluna == 8 && Navegacao.orientacaoAtual == Navegacao.NORTE)
					|| (coluna == 0 && Navegacao.orientacaoAtual == Navegacao.SUL)) {
				estaNaParede = true;
				Sound.beep();
			}

			if (estaNaParede) {
				Navegacao.parar();
				Navegacao.r√©();
				Delay.msDelay(800);
				if (virouEsq) {
					Navegacao.virarDuasRodasDir(85);
					if (linha == 8 && coluna == 0)
						Navegacao.alinhar();
				} else {
					Navegacao.virarDuasRodasEsq(85);
					if (!primeiraCurva) {
						Navegacao.alinhar();
						primeiraCurva = true;
					}
				}
				estaNaParede = false;
			}
			Navegacao.resetarTacometro();
			Delay.msDelay(1000);
	}

	private static void inicializarMapa() {
		for (int i = 0; i < numLinhas; i++) {
			for (int j = 0; j < numColunas; j++) {
				Mapa[i][j] = new Celula(new Posicao(i,j));
				Mapa[i][j].setChecked(false);
				Mapa[i][j].setOccupied(true);
			}
		}
	}

	/*
	 * private static int getProxCelula() { switch
	 * (Navegacao.ORIENTACAO[Navegacao.indiceOrientacao]) { case
	 * Navegacao.LESTE: return Mapa[linha + 1][coluna]; case Navegacao.OESTE:
	 * return Mapa[linha - 1][coluna]; case Navegacao.NORTE: return
	 * Mapa[linha][coluna + 1]; case Navegacao.SUL: return Mapa[linha][coluna -
	 * 1]; default: return Mapa[linha][coluna]; } }
	 */

	private static int verificarConteudo() {
		if (Reconhecimento.getDistancia() <= 0.15 && Captura.getGarraAberta()
				&& !estaNaParede) {
			Navegacao.setVelocidade(100);
			double distanciaBoneco = Reconhecimento.getDistancia();
			Navegacao.andarGraus(distanciaBoneco - 0.05);
			// andar o quanto falta para chegar no alvo
			Navegacao.parar();
			if (Navegacao.getToque() /* && !estaNaParede */) {
				Mapa[linha][coluna].setChecked(true);
				return Parede;
			} else {
				Captura.fecharGarra();
				if (!Reconhecimento.getPreto()) {
					Button.LEDPattern(2);
					Delay.msDelay(100);
					Captura.abrirGarra();
					Delay.msDelay(2000);
					Mapa[linha][coluna].setChecked(true);
					return bonecoBranco;

				} else {
					Button.LEDPattern(1);
					Mapa[linha][coluna].setChecked(true);
					return bonecoPreto;
				}
			}
		} else {
			Navegacao.setVelocidade(350);
			Mapa[linha][coluna].setChecked(true);
			return vazio;
		}
	}

	// private static Posicao ultMapeada;
	//private static Posicao atual = Mapa[linha][coluna].getPosicao();
	private static void retornar(Celula[][] mapa) throws Exception {
		Sound.beepSequence();
		retornando = true;
		Astar aStar = new Astar(mapa);
		// ultMapeada = mapa[linha][coluna].getPosicao();
		List<Celula> caminho = aStar.search(mapa[linha][coluna].getPosicao(),
				inicio);
		for (int i = 0; i < caminho.size(); i++) {
			Sound.beepSequence();
			if (caminho.get(i).getPosicao().y == Mapa[linha][coluna].getPosicao().y) {
				if (caminho.get(i).getPosicao().x < Mapa[linha][coluna].getPosicao().x) {
					celulaEsq = true;
				} else {
					celulaDir = true;
				}
			} else if (caminho.get(i).getPosicao().y < Mapa[linha][coluna].getPosicao().y) {
				celulaCima = true;
			} else {
				celulaBaixo = true;
			}
			switch (Navegacao.orientacaoAtual) {
			case Navegacao.LESTE:
				if (celulaEsq) {
					Navegacao.virarDuasRodasEsq(170); 
					Navegacao.proximaDirecao();  //Gambiarra para que a orientacao seja ajustada
				} else if (celulaDir) {
					Navegacao.andarFrente();
				} else if (celulaCima) {
					Navegacao.virarDuasRodasEsq(85);
				} else if (celulaBaixo) {
					Navegacao.virarDuasRodasDir(85);
				}
				break;
			case Navegacao.OESTE:
				if (celulaEsq) {
					Navegacao.andarFrente();
				} else if (celulaDir) {
					Navegacao.virarDuasRodasEsq(170);
					Navegacao.proximaDirecao();
				} else if (celulaCima) {
					Navegacao.virarDuasRodasDir(85);
				} else if (celulaBaixo) {
					Navegacao.virarDuasRodasEsq(85);
				}
				break;
			case Navegacao.NORTE:
				if (celulaEsq) {
					Navegacao.virarDuasRodasEsq(85);
				} else if (celulaDir) {
					Navegacao.virarDuasRodasDir(85);
				} else if (celulaCima) {
					Navegacao.andarFrente();
				} else if (celulaBaixo) {
					Navegacao.virarDuasRodasEsq(170);
					Navegacao.proximaDirecao();
				}
				break;
			case Navegacao.SUL:
				if (celulaEsq) {
					Navegacao.virarDuasRodasDir(85);
				} else if (celulaDir) {
					Navegacao.virarDuasRodasEsq(85);
				} else if (celulaCima) {
					Navegacao.virarDuasRodasEsq(170);
					Navegacao.proximaDirecao();
				} else if (celulaBaixo) {
					Navegacao.andarFrente();
				}
				break;
			default:
				break;
			}
			Navegacao.andarFrente();
			double distanciaPercorrida = Navegacao.getDistPercorrida();
			while(distanciaPercorrida < 0.2)
				distanciaPercorrida = Navegacao.getDistPercorrida();
			atualizarCelulas();
		}
		retornando = false;
	}

	private static void init() {
		Reconhecimento reconhecimento = new Reconhecimento();
		Thread thReconhecimento = new Thread(reconhecimento);
		thReconhecimento.start();
		Navegacao navegacao = new Navegacao();
		Thread thNavegacao = new Thread(navegacao);
		thNavegacao.start();
		Sound.beepSequenceUp();
		while (!Button.ENTER.isDown()) {
			System.out.println("Aperte ENTER para inciar");
		}
	}
}
